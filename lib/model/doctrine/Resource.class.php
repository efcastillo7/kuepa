<?php

/**
 * Resource
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    kuepa
 * @subpackage model
 * @author     fiberbunny
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Resource extends BaseResource
{
	const TYPE = 'Resource';
    static $time_per_word = 1.2; // Time reading each word in secs
    static $video_multiplier = 2; // Video lenght * Multiplier
    static $pdf_words_per_size = 40; // 40 words for each 1k of size
    static $slideshare_time_per_slide = 10; // 10 seconds per slide

    /**
     * 
     * @return ResourceTable
     */
    public static function getRepository() {
        return Doctrine_Core::getTable('Resource');
    }

    public function __toString(){
    	return $this->getName();
    }

    public function getLastResourceViewed($profile_id){
        return LogService::getInstance()->getLastResourceIdViewed($profile_id, $this);
    }

    public function getTotalTime($profile_id){
        return LogService::getInstance()->getTotalTime($profile_id, $this);
    }


    /** 
    * methods to calculate resources time (in seconds ) 
    */
    public function getTimePerWord(){
        return( self::$time_per_word );
    }

    public function getVideoMultiplier(){
        return( self::$video_multiplier );
    }

    public function getPdfWordsPerSize(){
        return( self::$pdf_words_per_size );
    }

    public function getTimePerSlide(){
        return( self::$slideshare_time_per_slide );
    }

    /**
    *  Main method to calculate time
    *  @1. Store word_count field on the ResourceData Table for text
    *  @return time in seconds
    */
    public function calculateTime(){
        $resourceData = $this -> getResourceData() -> getFirst();
        $type = strtolower( $resourceData -> getType() );
        $content = $resourceData -> getContent();
        $resource_time = 0;
        switch ($type) {
             case 'document': // pdf ppt
                $word_count = $resourceData -> getWordCount();
                if ( $word_count == NULL){
                     //uploads/documents/filename
                    $file_path = $resourceData->getFilePath();
                    $filesize = round(filesize($file_path)/1000); // in Kb
                    $word_count = $filesize * self::getPdfWordsPerSize();
                    $resourceData -> setWordCount($word_count);
                    $resourceData -> save();
                }
                $resource_time = $word_count * self::getTimePerWord();
                 break;
             case 'embeddedweb':
                $word_count = $resourceData -> getWordCount();
                if ( $word_count == NULL){
                    $url = $resourceData->getContent();
                    $request = curl_init($url);
                    curl_setopt($request, CURLOPT_RETURNTRANSFER, true);
                    $content = curl_exec ( $request );
                    $http_status = curl_getinfo($request, CURLINFO_HTTP_CODE);
                    curl_close($request);
                    $word_count = str_word_count( strip_tags($content ) );
                    $resourceData -> setWordCount($word_count);
                    $resourceData -> save();
                }
                $resource_time = $word_count * self::getTimePerWord();
                 break;
             case 'exercise':
                 # code...
                 break;
             case 'text':
                $word_count = $resourceData -> getWordCount();
                if ( $word_count == NULL){
                    $word_count = str_word_count( strip_tags($content ) );
                    $resourceData -> setWordCount($word_count);
                    $resourceData -> save();
                }
                $resource_time = $word_count * self::getTimePerWord();
                  break;
             case 'video':
                 //duration video_length
                 $duration = $resourceData->getVideoDuration();
                 $resource_time = $duration * self::getVideoMultiplier();
                break;
             
             default:
                 # code...
                 break;
        }
        return($resource_time);
    }
 
}
