<?php

/**
 * Component
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    kuepa
 * @subpackage model
 * @author     fiberbunny
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Component extends BaseComponent {

    protected $cacheCompletedStatus = array();
        
    /**
     * 
     * @return ComponentTable
     */
    public static function getRepository() {
        return Doctrine_Core::getTable('Component');
    }
    
    public function postSave($event)   {
        $this->clearCache($event);
    }
    
    public function preDelete($event) {
        $this->clearCache($event);
    }
    
    public function clearCache($event)
    {
        CacheHelper::getInstance()->delete('Component_getById', array( $this->getId() ));
        
        $parents = $this->getParents();
        foreach ( $parents as $parent ) {
            CacheHelper::getInstance()->deleteByPrefix('Component_getChilds', array( $parent->getId() ));
        }
    }

    public function getThumbnailPath() {
        return sfConfig::get('app_image_path_component') . $this->getThumbnail();
    }

    public function getChildren($onlyEnabled = true) {
        return ComponentService::getInstance()->getChilds($this->getId(), null, 'asc', true);
    }

    public function __toString() {
        return get_called_class();
    }

    public function getNameSlug() {
        return self::slugify($this->name);
    }
    
    public function setCacheCompletedStatus($completedStatus, $profile_id = null)
    {
        if ( !$profile_id ) {
            $profile_id = $this->getUser()->getProfile()->getId();
        }
        
        $this->cacheCompletedStatus[ $profile_id ] = $completedStatus;
        //added to session
        sfContext::getInstance()->getUser()->setCompletedStatus($this->getId(), $completedStatus);
    }
    
    public function getCacheCompletedStatus($profile_id = null)
    {
        if ( !$profile_id ) {            
            $profile_id = sfContext::getInstance()->getUser()->getProfile()->getId();
        }
        
        // return $this->cacheCompletedStatus[ $profile_id ];
        return sfContext::getInstance()->getUser()->getCompletedStatus($this->getId());
    }

    public static function slugify($text) {
        // replace all non letters or digits by -
        $text = preg_replace('/\W+/', '-', $text);

        // trim and lowercase
        $text = strtolower(trim($text, '-'));

        return $text;
    }

    public function getNextChild($previous_child_id) {
        
        return Component::getRepository()->createQuery("c")
                                         ->select('c.*')
                                         ->innerJoin("c.LearningPath lp on c.id = lp.child_id")
                                         ->innerJoin("c.LearningPath lpc on ? = lpc.child_id", $previous_child_id)
                                         ->where("lp.parent_id = ?", $this->getId())
                                         ->andWhere("lp.position > lpc.position")
                                         ->orderBy("lp.position ASC")
                                         ->limit(1)
                                         ->fetchOne();        
    }

    public function getPreviousChild($following_child_id) {
        
        return Component::getRepository()->createQuery("c")
                                         ->select('c.*')
                                         ->innerJoin("c.LearningPath lp on c.id = lp.child_id")
                                         ->innerJoin("c.LearningPath lpc on ? = lpc.child_id", $following_child_id)
                                         ->where("lp.parent_id = ?", $this->getId())
                                         ->andWhere("lp.position < lpc.position")
                                         ->orderBy("lp.position DESC")
                                         ->limit(1)
                                         ->fetchOne();
    }

    /*
     * Esta funcion debe usarse solo si se trae en una misma consulta component y learningPath
     * No debe utilizarse cuando se obtienen los learningPath asociados a un componente ondemand.
     */
    public function isEnabled(){        
        // return true;
        //TODO: Check because is returning first row
        $lp = $this->getLearningPath()->getFirst();
        if($lp){
            return $lp->getEnabled();
        }

        return true;
    }

}
