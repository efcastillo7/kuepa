<?php

/**
 * Exercise
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    kuepa
 * @subpackage model
 * @author     fiberbunny
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Exercise extends BaseExercise {

    public static function getRepository() {
        return Doctrine_Core::getTable('Exercise');
    }

    public function evaluate($keyvalueanswers) {
        //recibe un array de $question_id => $answervalue
        $questions = $this->getQuestions();
        $score = array();
        $total_score = 0;

        foreach ($questions as $one_question) {
            if(!array_key_exists($one_question->getId(), $keyvalueanswers)){
                $keyvalueanswers[$one_question->getId()] = null;
            }

            $ans = $one_question->evaluate($keyvalueanswers[$one_question->getId()]);
            $total_score += $ans['score'];

            $score[$one_question->getId()] = $ans;
        }

        return array('score' => $total_score, 'questions' => $score);
    }

    public function getTotalScore(){
        $q = self::getRepository()->createQuery('e')
            ->innerJoin('e.ExerciseHasExerciseQuestion eheq')
            ->innerJoin('eheq.ExerciseQuestion eq')
            ->innerJoin('eq.Answers ans')
            ->where('e.id = ?', $this->getId())
            ->select("sum(ans.value) as total")
            ->fetchOne();

        return $q->getTotal();
    }

    public function getQuestionsByLevel($parent_id=""){
        $q = ExerciseQuestion::getRepository()->createQuery("q")
            ->innerJoin('q.ExerciseHasExerciseQuestion eheq')
            ->where('eheq.exercise_id = ?', $this->getId());
        if(empty($parent_id)){
            $q->andWhere("eheq.exercise_parent_question_id IS NULL");
        }else{
            $q->andWhere("eheq.exercise_parent_question_id = ?", $parent_id);
        }

        $q->orderBy("position ASC");

        return $q->execute();
    }

    public function getTotal(){
        $total = 0;
        $questions = $this->getQuestionsByLevel();

        for ($j = 0; $j < $questions->count(); $j++){
            $sub_questions = $this->getQuestionsByLevel($questions[$j]->getId());
            if($sub_questions->count()){
                $total+=$sub_questions->count();
                $d=$sub_questions->count();
            }
            else{
                $total++;
            }
        }

        // SELECT * FROM exercise_has_exercise_question e 
        // WHERE e.exercise_id = '47' 
        // AND e.exercise_question_id not in (
        //     select d.exercise_parent_question_id 
        //     from exercise_has_exercise_question d 
        //     where d.exercise_id = 47 
            // and d.exercise_parent_question_id is not null)

        // $q2 = ExerciseHasExerciseQuestion::getRepository()->createQuery("q")
        // ->where('q.exercise_id = ?', $this->getId())
        // ->andWhere('q.exercise_parent_question_id is not null');

        // $q = ExerciseHasExerciseQuestion::getRepository()->createQuery("q")
        //     ->where('q.exercise_id = ?', $this->getId())
        //     ->andWhereNotIn('exercise_question_id', $q2);

        return $total;
    }

    public function getQuestionValueByLevel($id=""){

        $question = ExerciseQuestion::getRepository()->find($id);

        if($question->getType() != "introduction"){
            return $question->getValue();
        }

        $q = ExerciseQuestion::getRepository()->createQuery("q")
            ->innerJoin('q.ExerciseHasExerciseQuestion eheq')
            ->where('eheq.exercise_id = ?', $this->getId())
            ->andWhere("eheq.exercise_parent_question_id = ?", $id)
            ->innerJoin("eheq.ExerciseQuestion eq")
            ->select("sum(eq.value) as value");

        $result = $q->fetchOne();

        return $result->getValue();
    }


}
