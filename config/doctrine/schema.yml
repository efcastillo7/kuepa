# Main user entity, sfGuardUser is only used to store basic user data and login credentials
Profile:
  tableName:                   profile
  columns:
    sf_guard_user_id:          integer 
    nickname:                  varchar(15)
  relations:
    sfGuardUser:               { class: sfGuardUser, onDelete: CASCADE, local: sf_guard_user_id, foreign: id, foreignType: one }
    Colleges:
      class: College
      refClass: ProfileCollege
      type: many
      local: profile_id
      foreign: college_id
      foreignType: many
      foreignAlias: Profiles
    Components:
      class: Component
      refClass: ProfileLearningPath
      type: many
      local: profile_id
      foreign: component_id
      foreignAlias: Profiles
      
ProfileLearningPath:
  columns:
    profile_id: {type: integer, primary: true}
    component_id: {type: integer, primary: true}

ProfileCollege:
  columns:
    profile_id: {type: integer, primary: true}
    college_id: {type: integer, primary: true}

College:
  tableName: college
  columns:
    id: { type: integer, primary: true, autoincrement: true }
    name: varchar(255)

Component:
  actAs:
    Timestampable: ~
    SoftDelete: ~
    # Versionable:
    #   versionColumn: version
    #   className: %CLASS%Version
    #   auditLog: true
  tableName: component
  columns:
    id: { type: integer, primary: true, autoincrement: true }
    node_id: integer
    name: varchar(255)
    thumbnail: varchar(255)
    description: text
    level: { type: enum, values: [beginner, intermediate, advance]}
    profile_id: { type: integer }
    color: { type: enum, values: [green, lightgreen, violet, red, purple, blue, lightblue, darkblue, orange]}
    duration: float
  relations:
    Parents:
      class: Component
      refClass: LearningPath
      local: child_id
      foreign: parent_id
      type: many
    Children:
      class: Component
      refClass: LearningPath
      local: parent_id
      foreign: child_id
      type: many
    Author:
      class: Profile
      foreign: id
      local: profile_id
      type: one
    
Resource:
  inheritance:
    extends:          Component
    type: column_aggregation
    keyField: type
    keyValue: Resource
  relations:
    ResourceData:
      class: ResourceData
      local: id
      foreign: resource_id
      type: many
      foreignType: one
      foreignAlias: Resource
  
Course:
  inheritance:
    extends:          Component
    type: column_aggregation
    keyField: type
    keyValue: Course

Chapter:
  inheritance:
    extends:          Component
    type: column_aggregation
    keyField: type
    keyValue: Chapter

Lesson:
  inheritance:
    extends:          Component
    type: column_aggregation
    keyField: type
    keyValue: Lesson

LearningPath:
  columns:
    parent_id: integer
    child_id: integer
    position: integer
  relations:
    Parent:
      class: Component
      local: parent_id
      foreign: id
      type: one
    Child:
      class: Component
      local: child_id
      foreign: id
      type: one

ResourceData:
  actAs:
    Timestampable: ~
    SoftDelete: ~
    # Versionable:
    #   versionColumn: version
    #   className: %CLASS%Version
    #   auditLog: true
  columns:
    id: { type: integer, primary: true, autoincrement: true }
    resource_id: { type: integer }
    position: {type: integer, default: 1}
    content: blob
    enabled: { type: boolean, notnull: true, default: true }
    tags: { type: string }
    profile_id: { type: integer }
    parent_id: { type: integer }
    position: { type: integer }
    duration: float
    level: { type: enum, values: [beginner, intermediate, advance]}
  relations:
    Author:
      class: Profile
      foreign: id
      local: profile_id
      type: one
    Notes:
      class: Note
      type: many
      local: id
      foreign: resource_id
      foreignType: one
      foreignAlias: Resource
    # CreatedFrom:
    #   class: ResourceData
    #   local: parent_id
    #   foreign: id
    #   type: one


ResourceDataDocument:
  columns: 
    document_type: { type: enum, values: [pdf, image, ppt] }
  inheritance:
    extends: ResourceData
    type: column_aggregation
    keyField: type
    keyValue: Document

ResourceDataText:
  inheritance:
    extends: ResourceData
    type: column_aggregation
    keyField: type
    keyValue: Text

ResourceDataVideo:
  columns: 
    video_type: { type: enum, values: [youtube, vimeo, embebed] }
    path: { type: string }
  inheritance:
    extends: ResourceData
    type: column_aggregation
    keyField: type
    keyValue: Video
    
ResourceDataEmbeddedWeb:
  inheritance:
    extends: ResourceData
    type: column_aggregation
    keyField: type
    keyValue: EmbeddedWeb

ResourceDataExercise:
  inheritance:
    extends: ResourceData
    type: column_aggregation
    keyField: type
    keyValue: Exercise

Note:
  actAs:
    Timestampable: ~
  columns:
    id: { type: integer, primary: true, autoincrement: true }
    resource_id: integer
    profile_id: integer
    content: string
  relations:
    Resource:
      local: resource_id
      foreign: id
      type: one
    Profile:
      local: profile_id
      foreign: id
      
ProfileComponentCompletedStatus:
  columns:
    profile_id: {type: integer, primary: true}
    component_id: {type: integer, primary: true}
    completed_status: {type: integer}
  relations:
    Component:
      local: component_id
      foreign: id
      type: one
    Profile:
      local: profile_id
      foreign: id

Message:
  actAs:
    Timestampable: ~
  columns:
    id: {type: integer, primary: true, autoincrement: true}
    author_id: {type: integer, notnull: true}
    subject: {type: string(255)}
    message: {type: string}
  relations:
    Recipients:
      class: MessageRecipient
      type: many
      local: id
      foreign: message_id
      foreignType: one
      foreignAlias: Message

MessageRecipient:
  columns:
    id: {type: integer, primary: true, autoincrement: true}
    message_id: {type: integer, notnull: true}
    recipient_id: {type: integer, notnull: true}
    is_read: {type: boolean, notnull: true, default: false}
  relations:
    Recipient:
      class: Profile
      type: one
      local: recipient_id
      foreign: id
      foreignAlias: ReceivedMessages
      foreignType: many
    
CalendarEvent:
  actAs:
    Timestampable: ~
  columns:
    id: {type: integer, primary: true, autoincrement: true}
    profile_id: integer
    component_id: {type: integer}
    title: {type: string(255)}
    description: {type: string}
    start: {type: timestamp}
    end: {type: timestamp}
  relations:
    Profile:
      local: profile_id
      foreign: id
